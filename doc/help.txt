The public functions available in the electron-atcommand-library

Set or clear debug mode
bool setDebug(bool true/false);
When debug mode is enabled there are Serial.println statements which are used to put debug information on
the USB console port.

The following functions should return the standard Cellular.command() return codes
NOT_FOUND = 0
WAIT = -1 // TIMEOUT
RESP_OK = -2
RESP_ERROR = -3
RESP_PROMPT = -4
RESP_ABORTED = -5

Set the SMS mode either as non text (0) or text (1) mode
int setSMSMode(char mode);
This must be called with mode = 1 because the SMS messaging will not work unless set to text mode. It is
left settable at the moment in case the non text mode can be used in future

Send a text SMS message
int sendMessage(char* message,char* phone number,int timeout);
This sends a 'message' to the 'phone number' using 'timeout' mSecs

Check if there are any received SMS messages on the device
int checkMessages(int timeout);	
If there are any messages on the device then the results are in the structure
	struct smsStruct{
		char mess;
		char status[10];
		char phone[20];
		char sms[50];
	};
An array of this structure is provided as 
	struct smsStruct smsResults[10];
and a structure pointer as
	struct smsStruct* smsPtr;
The number of messages found is provided in char numMessages;
The current library only allows for a maximum of 10 messages and does not check for overflow. If you are
intending to have more than this number current on the device you will have to do some modifications.
My approach is that I delete the messages when I have read them

Delete a text message
int deleteMessage(char message,int timeout);
This function will delete a text message number 'message' and uses a 'timeout' mSecs

